//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputSystem/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace MP.InputSystems
{
    public partial class @Controls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @Controls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""PlayerMap"",
            ""id"": ""cdd1fbf5-026b-484d-aa09-cc656980a190"",
            ""actions"": [
                {
                    ""name"": ""LookAction"",
                    ""type"": ""Value"",
                    ""id"": ""afc7fbbb-8073-4f86-b801-fb3d55129808"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PullAction"",
                    ""type"": ""Button"",
                    ""id"": ""43bebb68-00ad-44e3-afb9-90017d1b4da1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveAction"",
                    ""type"": ""Value"",
                    ""id"": ""360d17f3-9f31-4140-a9e7-4a26f9f6c6e2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ddce3593-4863-4d66-8fba-3588f332aa27"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PullAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""54794ff0-4657-4b41-a048-6a48e191ff1b"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8af1a223-bc9c-49c4-b347-306c8b501637"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""79bacb0e-1a5e-4e35-b3e8-41adc13986f9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""eea59cf6-169d-470c-93a8-c59339faef53"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2529c31e-3794-4489-9830-9272f188abe6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5def0af1-32b5-4ec8-83fe-240c63ad2e0b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerMap
            m_PlayerMap = asset.FindActionMap("PlayerMap", throwIfNotFound: true);
            m_PlayerMap_LookAction = m_PlayerMap.FindAction("LookAction", throwIfNotFound: true);
            m_PlayerMap_PullAction = m_PlayerMap.FindAction("PullAction", throwIfNotFound: true);
            m_PlayerMap_MoveAction = m_PlayerMap.FindAction("MoveAction", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerMap
        private readonly InputActionMap m_PlayerMap;
        private IPlayerMapActions m_PlayerMapActionsCallbackInterface;
        private readonly InputAction m_PlayerMap_LookAction;
        private readonly InputAction m_PlayerMap_PullAction;
        private readonly InputAction m_PlayerMap_MoveAction;
        public struct PlayerMapActions
        {
            private @Controls m_Wrapper;
            public PlayerMapActions(@Controls wrapper) { m_Wrapper = wrapper; }
            public InputAction @LookAction => m_Wrapper.m_PlayerMap_LookAction;
            public InputAction @PullAction => m_Wrapper.m_PlayerMap_PullAction;
            public InputAction @MoveAction => m_Wrapper.m_PlayerMap_MoveAction;
            public InputActionMap Get() { return m_Wrapper.m_PlayerMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerMapActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerMapActions instance)
            {
                if (m_Wrapper.m_PlayerMapActionsCallbackInterface != null)
                {
                    @LookAction.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnLookAction;
                    @LookAction.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnLookAction;
                    @LookAction.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnLookAction;
                    @PullAction.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnPullAction;
                    @PullAction.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnPullAction;
                    @PullAction.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnPullAction;
                    @MoveAction.started -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMoveAction;
                    @MoveAction.performed -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMoveAction;
                    @MoveAction.canceled -= m_Wrapper.m_PlayerMapActionsCallbackInterface.OnMoveAction;
                }
                m_Wrapper.m_PlayerMapActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @LookAction.started += instance.OnLookAction;
                    @LookAction.performed += instance.OnLookAction;
                    @LookAction.canceled += instance.OnLookAction;
                    @PullAction.started += instance.OnPullAction;
                    @PullAction.performed += instance.OnPullAction;
                    @PullAction.canceled += instance.OnPullAction;
                    @MoveAction.started += instance.OnMoveAction;
                    @MoveAction.performed += instance.OnMoveAction;
                    @MoveAction.canceled += instance.OnMoveAction;
                }
            }
        }
        public PlayerMapActions @PlayerMap => new PlayerMapActions(this);
        public interface IPlayerMapActions
        {
            void OnLookAction(InputAction.CallbackContext context);
            void OnPullAction(InputAction.CallbackContext context);
            void OnMoveAction(InputAction.CallbackContext context);
        }
    }
}
